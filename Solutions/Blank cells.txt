#include <iostream>
#include <vector>
using namespace std;
#define wall 0
#define path 3
#define source 1
#define destination 2

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int dfs(int x, int y, vector<vector<int>>& v, vector<vector<int>>& vis)
{
    int xbound = v.size();
    int ybound = v[0].size();
    int ans = 0;
    if (x < 0 || y < 0 || x >= xbound || y >= ybound) {
        return 0;
    }
    if (v[x][y] == destination) {
        return 1;
    }
    for (int i = 0; i < 4; i++) {
        if ((x + dx[i] >= 0 && x + dx[i] < xbound)
            && (y + dy[i] >= 0 && y + dy[i] < ybound)
            && vis[x + dx[i]][y + dy[i]] == 0
            && (v[x + dx[i]][y + dy[i]] == path || v[x + dx[i]][y + dy[i]] == destination)) {
            vis[x + dx[i]][y + dy[i]] = 1;
            ans = ans | dfs(x + dx[i], y + dy[i], v, vis);
            vis[x + dx[i]][y + dy[i]] = 0;
        }
    }
    return ans;
}
int main()
{
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> v(n, vector<int>(n, 0));
        vector<vector<int>> vis(n, vector<int>(n, 0));
        int startx = 0;
        int starty = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> v[i][j];
                if (v[i][j] == source) {
                    startx = i;
                    starty = j;
                }
                //cout<<v[i][j]<<" ";
            }
            //cout<<endl;
        }
        int ans = dfs(startx, starty, v, vis);
        cout << ans << endl;
    }
    return 0;
}